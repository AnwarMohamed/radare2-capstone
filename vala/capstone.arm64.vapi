[CCode (cprefix="CS_")]
namespace Capstone {
	[CCode (cname="cs_arm64", cheader_filename="arm64.h")]
	public struct ARM64 {
		ArmCC cc;
		bool update_flags;
		bool writeback;
		uint8 op_count;
		ArmOp operands[8];
	}

	[CCode (cname="arm64_extender", cprefix="ARM64_EXT_", cheader_filename="arm64.h")]
	public enum Arm64Extender {
		INVALID = 0,
		UXTB = 1,
		UXTH = 2,
		UXTW = 3,
		UXTX = 4,
		SXTB = 5,
		SXTH = 6,
		SXTW = 7,
		SXTX = 8
	}

	[CCode (cname="arm64_reg", cprefix="ARM64_SFT_", cheader_filename="arm64.h")]
	public enum Arm64Shifter {
		INVALID = 0,
		ASR,
		LSL,
		LSR,
		ROR,
		RRX,
		ASR_REG,
		LSL_REG,
		LSR_REG,
		ROR_REG,
		RRX_REG,
	}

	[CCode (cname="arm64_reg", cprefix="ARM64_CC_", cheader_filename="arm64.h")]
	public enum Arm64CC {
		INVALID = 0,
		EQ,
		NE,
		HS,
		LO,
		MI,
		PL,
		VS,
		VC,
		HI,
		LS,
		GE,
		LT,
		GT,
		LE,
		AL,
		NV
	}

	[CCode (cname="")]
	public struct Arm64Shift {
		ArmShifter type;
		uint value;
	}

	[CCode (cname="cs_arm64_op", cheader_filename="arm64.h")]
	public struct Arm64Op {
		ArmShift shift;
		Arm64Extender ext;
		ArmOpType type;
		// union
		uint reg;
		int32 imm;
		double fp;
		ArmOpMem mem;
	}

	[CCode (cname="arm64_reg", cprefix="ARM64_OP_", cheader_filename="arm64.h")]
	public enum Arm64OpType {
		INVALID = 0,
		REG,
		CIMM,
		PIMM,
		IMM,
		FP,
		MEM
	}

	[CCode (cname="arm64_op_mem", cheader_filename="arm64.h")]
	public struct Arm64OpMem {
		uint base;
		uint index;
		int32 disp;
	}

	[CCode (cname="arm64_insn", cprefix="ARM64_INS_", cheader_filename="arm64.h")]
	public enum Arm64Insn {
		INVALID = 0,

		ABS,
		ADC,
		ADDHN2,
		ADDHN,
		ADDP,
		ADDV,
		ADD,
		CMN,
		ADRP,
		ADR,
		AESD,
		AESE,
		AESIMC,
		AESMC,
		AND,
		ASR,
		AT,
		BFI,
		BFM,
		BFXIL,
		BIC,
		BIF,
		BIT,
		BLR,
		BL,
		BRK,
		BR,
		BSL,
		B,
		CBNZ,
		CBZ,
		CCMN,
		CCMP,
		CLREX,
		CLS,
		CLZ,
		CMEQ,
		CMGE,
		CMGT,
		CMHI,
		CMHS,
		CMLE,
		CMLT,
		CMP,
		CMTST,
		CNT,
		CRC32B,
		CRC32CB,
		CRC32CH,
		CRC32CW,
		CRC32CX,
		CRC32H,
		CRC32W,
		CRC32X,
		CSEL,
		CSINC,
		CSINV,
		CSNEG,
		DCPS1,
		DCPS2,
		DCPS3,
		DC,
		DMB,
		DRPS,
		DSB,
		DUP,
		EON,
		EOR,
		ERET,
		EXTR,
		EXT,
		FABD,
		FABS,
		FACGE,
		FACGT,
		FADDP,
		FADD,
		FCCMPE,
		FCCMP,
		FCMEQ,
		FCMGE,
		FCMGT,
		FCMLE,
		FCMLT,
		FCMP,
		FCMPE,
		FCSEL,
		FCVTAS,
		FCVTAU,
		FCVTL,
		FCVTL2,
		FCVTMS,
		FCVTMU,
		FCVTN,
		FCVTN2,
		FCVTNS,
		FCVTNU,
		FCVTPS,
		FCVTPU,
		FCVTXN,
		FCVTXN2,
		FCVTZS,
		FCVTZU,
		FCVT,
		FDIV,
		FMADD,
		FMAXNMP,
		FMAXNMV,
		FMAXNM,
		FMAXP,
		FMAXV,
		FMAX,
		FMINNMP,
		FMINNMV,
		FMINNM,
		FMINP,
		FMINV,
		FMIN,
		FMLA,
		FMLS,
		FMOV,
		FMSUB,
		FMULX,
		FMUL,
		FNEG,
		FNMADD,
		FNMSUB,
		FNMUL,
		FRECPE,
		FRECPS,
		FRECPX,
		FRINTA,
		FRINTI,
		FRINTM,
		FRINTN,
		FRINTP,
		FRINTX,
		FRINTZ,
		FRSQRTE,
		FRSQRTS,
		FSQRT,
		FSUB,
		HINT,
		HLT,
		HVC,
		IC,
		INS,
		ISB,
		LD1,
		LD1R,
		LD2,
		LD2R,
		LD3,
		LD3R,
		LD4,
		LD4R,
		LDARB,
		LDAR,
		LDARH,
		LDAXP,
		LDAXRB,
		LDAXR,
		LDAXRH,
		LDPSW,
		LDRSB,
		LDURSB,
		LDRSH,
		LDURSH,
		LDRSW,
		LDR,
		LDTRSB,
		LDTRSH,
		LDTRSW,
		LDURSW,
		LDXP,
		LDXRB,
		LDXR,
		LDXRH,
		LDRH,
		LDURH,
		STRH,
		STURH,
		LDTRH,
		STTRH,
		LDUR,
		STR,
		STUR,
		LDTR,
		STTR,
		LDRB,
		LDURB,
		STRB,
		STURB,
		LDTRB,
		STTRB,
		LDP,
		LDNP,
		STNP,
		STP,
		LSL,
		LSR,
		MADD,
		MLA,
		MLS,
		MOVI,
		MOVK,
		MOVN,
		MOVZ,
		MRS,
		MSR,
		MSUB,
		MUL,
		MVNI,
		MVN,
		NEG,
		NOT,
		ORN,
		ORR,
		PMULL2,
		PMULL,
		PMUL,
		PRFM,
		PRFUM,
		SQRSHRUN2,
		SQRSHRUN,
		SQSHRUN2,
		SQSHRUN,
		RADDHN2,
		RADDHN,
		RBIT,
		RET,
		REV16,
		REV32,
		REV64,
		REV,
		ROR,
		RSHRN2,
		RSHRN,
		RSUBHN2,
		RSUBHN,
		SABAL2,
		SABAL,
		SABA,
		SABDL2,
		SABDL,
		SABD,
		SADALP,
		SADDL2,
		SADDLP,
		SADDLV,
		SADDL,
		SADDW2,
		SADDW,
		SBC,
		SBFIZ,
		SBFM,
		SBFX,
		SCVTF,
		SDIV,
		SHA1C,
		SHA1H,
		SHA1M,
		SHA1P,
		SHA1SU0,
		SHA1SU1,
		SHA256H,
		SHA256H2,
		SHA256SU0,
		SHA256SU1,
		SHADD,
		SHLL2,
		SHLL,
		SHL,
		SHRN2,
		SHRN,
		SHSUB,
		SLI,
		SMADDL,
		SMAXP,
		SMAXV,
		SMAX,
		SMC,
		SMINP,
		SMINV,
		SMIN,
		SMLAL2,
		SMLAL,
		SMLSL2,
		SMLSL,
		SMOV,
		SMSUBL,
		SMULH,
		SMULL2,
		SMULL,
		SQABS,
		SQADD,
		SQDMLAL2,
		SQDMLAL,
		SQDMLSL2,
		SQDMLSL,
		SQDMULH,
		SQDMULL2,
		SQDMULL,
		SQNEG,
		SQRDMULH,
		SQRSHL,
		SQRSHRN,
		SQRSHRN2,
		SQSHLU,
		SQSHL,
		SQSHRN,
		SQSHRN2,
		SQSUB,
		SQXTN,
		SQXTN2,
		SQXTUN,
		SQXTUN2,
		SRHADD,
		SRI,
		SRSHL,
		SRSHR,
		SRSRA,
		SSHLL2,
		SSHLL,
		SSHL,
		SSHR,
		SSRA,
		SSUBL2,
		SSUBL,
		SSUBW2,
		SSUBW,
		ST1,
		ST2,
		ST3,
		ST4,
		STLRB,
		STLR,
		STLRH,
		STLXP,
		STLXRB,
		STLXR,
		STLXRH,
		STXP,
		STXRB,
		STXR,
		STXRH,
		SUBHN2,
		SUBHN,
		SUB,
		SUQADD,
		SVC,
		SXTB,
		SXTH,
		SXTW,
		SYSL,
		SYS,
		TBL,
		TBNZ,
		TBX,
		TBZ,
		TLBI,
		TRN1,
		TRN2,
		TST,
		UABAL2,
		UABAL,
		UABA,
		UABDL2,
		UABDL,
		UABD,
		UADALP,
		UADDL2,
		UADDLP,
		UADDLV,
		UADDL,
		UADDW2,
		UADDW,
		UBFIZ,
		UBFM,
		UBFX,
		UCVTF,
		UDIV,
		UHADD,
		UHSUB,
		UMADDL,
		UMAXP,
		UMAXV,
		UMAX,
		UMINP,
		UMINV,
		UMIN,
		UMLAL2,
		UMLAL,
		UMLSL2,
		UMLSL,
		UMOV,
		UMSUBL,
		UMULH,
		UMULL2,
		UMULL,
		UQADD,
		UQRSHL,
		UQRSHRN,
		UQRSHRN2,
		UQSHL,
		UQSHRN,
		UQSHRN2,
		UQSUB,
		UQXTN,
		UQXTN2,
		URECPE,
		URHADD,
		URSHL,
		URSHR,
		URSQRTE,
		URSRA,
		USHLL2,
		USHLL,
		USHL,
		USHR,
		USQADD,
		USRA,
		USUBL2,
		USUBL,
		USUBW2,
		USUBW,
		UXTB,
		UXTH,
		UZP1,
		UZP2,
		XTN,
		XTN2,
		ZIP1,
		ZIP2,

		MNEG,
		UMNEGL,
		SMNEGL,
		MOV,
		NOP,
		YIELD,
		WFE,
		WFI,
		SEV,
		SEVL,
		NGC,

		MAX,  // <-- mark the end of the list of insn

	}


	[CCode (cname="arm64_reg", cprefix="ARM64_REG_", cheader_filename="arm64.h")]
	public enum Arm64Reg {
		INVALID = 0,

		NZCV,
		WSP,
		WZR,
		SP,
		XZR,
		B0,
		B1,
		B2,
		B3,
		B4,
		B5,
		B6,
		B7,
		B8,
		B9,
		B10,
		B11,
		B12,
		B13,
		B14,
		B15,
		B16,
		B17,
		B18,
		B19,
		B20,
		B21,
		B22,
		B23,
		B24,
		B25,
		B26,
		B27,
		B28,
		B29,
		B30,
		B31,
		D0,
		D1,
		D2,
		D3,
		D4,
		D5,
		D6,
		D7,
		D8,
		D9,
		D10,
		D11,
		D12,
		D13,
		D14,
		D15,
		D16,
		D17,
		D18,
		D19,
		D20,
		D21,
		D22,
		D23,
		D24,
		D25,
		D26,
		D27,
		D28,
		D29,
		D30,
		D31,
		H0,
		H1,
		H2,
		H3,
		H4,
		H5,
		H6,
		H7,
		H8,
		H9,
		H10,
		H11,
		H12,
		H13,
		H14,
		H15,
		H16,
		H17,
		H18,
		H19,
		H20,
		H21,
		H22,
		H23,
		H24,
		H25,
		H26,
		H27,
		H28,
		H29,
		H30,
		H31,
		Q0,
		Q1,
		Q2,
		Q3,
		Q4,
		Q5,
		Q6,
		Q7,
		Q8,
		Q9,
		Q10,
		Q11,
		Q12,
		Q13,
		Q14,
		Q15,
		Q16,
		Q17,
		Q18,
		Q19,
		Q20,
		Q21,
		Q22,
		Q23,
		Q24,
		Q25,
		Q26,
		Q27,
		Q28,
		Q29,
		Q30,
		Q31,
		S0,
		S1,
		S2,
		S3,
		S4,
		S5,
		S6,
		S7,
		S8,
		S9,
		S10,
		S11,
		S12,
		S13,
		S14,
		S15,
		S16,
		S17,
		S18,
		S19,
		S20,
		S21,
		S22,
		S23,
		S24,
		S25,
		S26,
		S27,
		S28,
		S29,
		S30,
		S31,
		W0,
		W1,
		W2,
		W3,
		W4,
		W5,
		W6,
		W7,
		W8,
		W9,
		W10,
		W11,
		W12,
		W13,
		W14,
		W15,
		W16,
		W17,
		W18,
		W19,
		W20,
		W21,
		W22,
		W23,
		W24,
		W25,
		W26,
		W27,
		W28,
		W29,
		W30,
		X0,
		X1,
		X2,
		X3,
		X4,
		X5,
		X6,
		X7,
		X8,
		X9,
		X10,
		X11,
		X12,
		X13,
		X14,
		X15,
		X16,
		X17,
		X18,
		X19,
		X20,
		X21,
		X22,
		X23,
		X24,
		X25,
		X26,
		X27,
		X28,
		X29,
		X30,
		D0_D1,
		D1_D2,
		D2_D3,
		D3_D4,
		D4_D5,
		D5_D6,
		D6_D7,
		D7_D8,
		D8_D9,
		D9_D10,
		D10_D11,
		D11_D12,
		D12_D13,
		D13_D14,
		D14_D15,
		D15_D16,
		D16_D17,
		D17_D18,
		D18_D19,
		D19_D20,
		D20_D21,
		D21_D22,
		D22_D23,
		D23_D24,
		D24_D25,
		D25_D26,
		D26_D27,
		D27_D28,
		D28_D29,
		D29_D30,
		D30_D31,
		D31_D0,
		Q0_Q1,
		Q1_Q2,
		Q2_Q3,
		Q3_Q4,
		Q4_Q5,
		Q5_Q6,
		Q6_Q7,
		Q7_Q8,
		Q8_Q9,
		Q9_Q10,
		Q10_Q11,
		Q11_Q12,
		Q12_Q13,
		Q13_Q14,
		Q14_Q15,
		Q15_Q16,
		Q16_Q17,
		Q17_Q18,
		Q18_Q19,
		Q19_Q20,
		Q20_Q21,
		Q21_Q22,
		Q22_Q23,
		Q23_Q24,
		Q24_Q25,
		Q25_Q26,
		Q26_Q27,
		Q27_Q28,
		Q28_Q29,
		Q29_Q30,
		Q30_Q31,
		Q31_Q0,
		D0_D1_D2,
		D1_D2_D3,
		D2_D3_D4,
		D3_D4_D5,
		D4_D5_D6,
		D5_D6_D7,
		D6_D7_D8,
		D7_D8_D9,
		D8_D9_D10,
		D9_D10_D11,
		D10_D11_D12,
		D11_D12_D13,
		D12_D13_D14,
		D13_D14_D15,
		D14_D15_D16,
		D15_D16_D17,
		D16_D17_D18,
		D17_D18_D19,
		D18_D19_D20,
		D19_D20_D21,
		D20_D21_D22,
		D21_D22_D23,
		D22_D23_D24,
		D23_D24_D25,
		D24_D25_D26,
		D25_D26_D27,
		D26_D27_D28,
		D27_D28_D29,
		D28_D29_D30,
		D29_D30_D31,
		D30_D31_D0,
		D31_D0_D1,
		Q0_Q1_Q2,
		Q1_Q2_Q3,
		Q2_Q3_Q4,
		Q3_Q4_Q5,
		Q4_Q5_Q6,
		Q5_Q6_Q7,
		Q6_Q7_Q8,
		Q7_Q8_Q9,
		Q8_Q9_Q10,
		Q9_Q10_Q11,
		Q10_Q11_Q12,
		Q11_Q12_Q13,
		Q12_Q13_Q14,
		Q13_Q14_Q15,
		Q14_Q15_Q16,
		Q15_Q16_Q17,
		Q16_Q17_Q18,
		Q17_Q18_Q19,
		Q18_Q19_Q20,
		Q19_Q20_Q21,
		Q20_Q21_Q22,
		Q21_Q22_Q23,
		Q22_Q23_Q24,
		Q23_Q24_Q25,
		Q24_Q25_Q26,
		Q25_Q26_Q27,
		Q26_Q27_Q28,
		Q27_Q28_Q29,
		Q28_Q29_Q30,
		Q29_Q30_Q31,
		Q30_Q31_Q0,
		Q31_Q0_Q1,
		D0_D1_D2_D3,
		D1_D2_D3_D4,
		D2_D3_D4_D5,
		D3_D4_D5_D6,
		D4_D5_D6_D7,
		D5_D6_D7_D8,
		D6_D7_D8_D9,
		D7_D8_D9_D10,
		D8_D9_D10_D11,
		D9_D10_D11_D12,
		D10_D11_D12_D13,
		D11_D12_D13_D14,
		D12_D13_D14_D15,
		D13_D14_D15_D16,
		D14_D15_D16_D17,
		D15_D16_D17_D18,
		D16_D17_D18_D19,
		D17_D18_D19_D20,
		D18_D19_D20_D21,
		D19_D20_D21_D22,
		D20_D21_D22_D23,
		D21_D22_D23_D24,
		D22_D23_D24_D25,
		D23_D24_D25_D26,
		D24_D25_D26_D27,
		D25_D26_D27_D28,
		D26_D27_D28_D29,
		D27_D28_D29_D30,
		D28_D29_D30_D31,
		D29_D30_D31_D0,
		D30_D31_D0_D1,
		D31_D0_D1_D2,
		Q0_Q1_Q2_Q3,
		Q1_Q2_Q3_Q4,
		Q2_Q3_Q4_Q5,
		Q3_Q4_Q5_Q6,
		Q4_Q5_Q6_Q7,
		Q5_Q6_Q7_Q8,
		Q6_Q7_Q8_Q9,
		Q7_Q8_Q9_Q10,
		Q8_Q9_Q10_Q11,
		Q9_Q10_Q11_Q12,
		Q10_Q11_Q12_Q13,
		Q11_Q12_Q13_Q14,
		Q12_Q13_Q14_Q15,
		Q13_Q14_Q15_Q16,
		Q14_Q15_Q16_Q17,
		Q15_Q16_Q17_Q18,
		Q16_Q17_Q18_Q19,
		Q17_Q18_Q19_Q20,
		Q18_Q19_Q20_Q21,
		Q19_Q20_Q21_Q22,
		Q20_Q21_Q22_Q23,
		Q21_Q22_Q23_Q24,
		Q22_Q23_Q24_Q25,
		Q23_Q24_Q25_Q26,
		Q24_Q25_Q26_Q27,
		Q25_Q26_Q27_Q28,
		Q26_Q27_Q28_Q29,
		Q27_Q28_Q29_Q30,
		Q28_Q29_Q30_Q31,
		Q29_Q30_Q31_Q0,
		Q30_Q31_Q0_Q1,
		Q31_Q0_Q1_Q2,

		MAX
	}

	[CCode (cname="arm64_insn_group", cprefix="ARM64_GRP_", cheader_filename="arm64.h")]
	public enum Arm64InsnGroup {
		INVALID = 0,
		CRYPTO,
		FPARMV8,
		NEON,
		JUMP,

		MAX,
	}
}
